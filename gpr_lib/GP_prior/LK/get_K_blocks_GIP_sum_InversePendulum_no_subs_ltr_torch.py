import torch

def get_K_blocks_GIP_sum_InversePendulum_no_subs(X1, X2, pos_indices, vel_indices, acc_indices, sigma_kin_vel_list, sigma_kin_pos_list, sigma_pot_list):

    q_i1 = X1[:,pos_indices[0]:pos_indices[0]+1]
    dq_i1 = X1[:,vel_indices[0]:vel_indices[0]+1]
    ddq_i1 = X1[:,acc_indices[0]:acc_indices[0]+1]
    q_j1 = X2[:,pos_indices[0]:pos_indices[0]+1].transpose(1,0)
    dq_j1 = X2[:,vel_indices[0]:vel_indices[0]+1].transpose(1,0)
    ddq_j1 = X2[:,acc_indices[0]:acc_indices[0]+1].transpose(1,0)
    q_i2 = X1[:,pos_indices[1]:pos_indices[1]+1]
    dq_i2 = X1[:,vel_indices[1]:vel_indices[1]+1]
    ddq_i2 = X1[:,acc_indices[1]:acc_indices[1]+1]
    q_j2 = X2[:,pos_indices[1]:pos_indices[1]+1].transpose(1,0)
    dq_j2 = X2[:,vel_indices[1]:vel_indices[1]+1].transpose(1,0)
    ddq_j2 = X2[:,acc_indices[1]:acc_indices[1]+1].transpose(1,0)

    sigma_kin_v_1_1 = sigma_kin_vel_list[0][0]
    sigma_kin_p_1_1_s = sigma_kin_pos_list[0][0]
    sigma_kin_p_1_1_c = sigma_kin_pos_list[0][1]
    sigma_kin_p_1_1_off = sigma_kin_pos_list[0][2]
    sigma_pot_1_s = sigma_pot_list[0][0]
    sigma_pot_1_c = sigma_pot_list[0][1]
    sigma_pot_1_off = sigma_pot_list[0][2]
    sigma_kin_v_2_1 = sigma_kin_vel_list[1][0]
    sigma_kin_p_2_1_s = sigma_kin_pos_list[1][0]
    sigma_kin_p_2_1_c = sigma_kin_pos_list[1][1]
    sigma_kin_p_2_1_off = sigma_kin_pos_list[1][2]
    sigma_kin_v_2_2 = sigma_kin_vel_list[1][1]
    sigma_kin_p_2_2_s = sigma_kin_pos_list[2][0]
    sigma_kin_p_2_2_c = sigma_kin_pos_list[2][1]
    sigma_kin_p_2_2_off = sigma_kin_pos_list[2][2]
    sigma_pot_2_s = sigma_pot_list[1][0]
    sigma_pot_2_c = sigma_pot_list[1][1]
    sigma_pot_2_off = sigma_pot_list[1][2]

    
    x0 = torch.sin(q_j1)
    x1 = torch.sin(q_i1)
    x2 = x0*x1
    x3 = torch.cos(q_i1)
    x4 = torch.cos(q_j1)
    x5 = x3*x4
    x6 = torch.cos(q_i2)
    x7 = torch.cos(q_j2)
    x8 = x6*x7
    x9 = torch.sin(q_i2)
    x10 = torch.sin(q_j2)
    x11 = x10*x9
    x12 = sigma_kin_v_1_1**2
    x13 = sigma_kin_p_1_1_c*x5 + sigma_kin_p_1_1_off + sigma_kin_p_1_1_s*x2
    x14 = x12*x13
    x15 = x14*(sigma_kin_p_1_1_c*x2 + sigma_kin_p_1_1_s*x5)
    x16 = dq_j1**2
    x17 = dq_i1**2
    x18 = 2*x17
    x19 = x16*x18
    x20 = x0*x3
    x21 = x1*x4
    x22 = sigma_kin_p_1_1_c*x20 - sigma_kin_p_1_1_s*x21
    x23 = sigma_kin_p_1_1_c*x21 - sigma_kin_p_1_1_s*x20
    x24 = x12*x22*x23
    x25 = 4*dq_j1
    x26 = sigma_kin_p_2_2_c*x7
    x27 = sigma_kin_p_2_2_s*x10
    x28 = sigma_kin_p_2_2_off + x26*x6 + x27*x9
    x29 = x28**2
    x30 = sigma_kin_v_2_1*x29
    x31 = sigma_kin_p_2_1_c*x5 + sigma_kin_p_2_1_off + sigma_kin_p_2_1_s*x2
    x32 = dq_j2*sigma_kin_v_2_2
    x33 = x31*x32
    x34 = sigma_kin_p_2_1_c*x20 - sigma_kin_p_2_1_s*x21
    x35 = ddq_i2*x34
    x36 = x30*x33*x35
    x37 = dq_i1*dq_j1
    x38 = sigma_kin_v_2_1*x37
    x39 = dq_i2*x32
    x40 = x38 + x39
    x41 = x40**2
    x42 = 2*x41
    x43 = sigma_kin_p_2_1_c*x2 + sigma_kin_p_2_1_s*x5
    x44 = x31*x43
    x45 = x29*x44
    x46 = sigma_kin_p_2_1_c*x21 - sigma_kin_p_2_1_s*x20
    x47 = x34*x46
    x48 = x29*x47
    x49 = x31*x40
    x50 = dq_i2*x49
    x51 = dq_j1*sigma_kin_v_2_1
    x52 = x28*x51
    x53 = x26*x9 - x27*x6
    x54 = x34*x53
    x55 = 8*x54
    x56 = ddq_i2*x28
    x57 = dq_i2**2
    x58 = x53*x57
    x59 = 2*x58
    x60 = x31**2
    x61 = 2*x60
    x62 = ddq_j2*sigma_kin_v_2_2
    x63 = sigma_kin_v_2_1*x28
    x64 = sigma_kin_v_2_1**2
    x65 = x29*x64
    x66 = x31*x65
    x67 = ddq_i1*(x14*x22 + x34*x66)
    x68 = x24*x37
    x69 = x15*x37
    x70 = x30*x40
    x71 = x47*x70
    x72 = x44*x70
    x73 = x71 + x72
    x74 = x14*x23
    x75 = x46*x66
    x76 = dq_i1*x28
    x77 = dq_i2*x64
    x78 = 4*ddq_j1
    x79 = dq_i2*x38
    x80 = sigma_kin_p_2_2_c*x11 + sigma_kin_p_2_2_s*x8
    x81 = x28*x80
    x82 = 2*dq_j1
    x83 = x10*x6
    x84 = x7*x9
    x85 = sigma_kin_p_2_2_c*x83 - sigma_kin_p_2_2_s*x84
    x86 = ddq_i1*x31
    x87 = x28*x86
    x88 = x85*x87
    x89 = x31*x56
    x90 = x32*x85
    x91 = x89*x90
    x92 = x53*x85
    x93 = x40*x76
    x94 = 2*x46
    x95 = x85*x93*x94
    x96 = x76*x94
    x97 = x85*x96
    x98 = 4*x31
    x99 = dq_j2*sigma_kin_v_2_1*x98
    x100 = dq_j1*x17
    x101 = 2*x54
    x102 = x101*x31
    x103 = x34*x86
    x104 = sigma_kin_v_2_2**2
    x105 = dq_j2**2*x104
    x106 = 4*dq_i1*x32*x40
    x107 = x28*x98
    x108 = 2*x30*x31*(-x18*x46 + x86)
    x109 = x28*x32
    x110 = x109*x17
    x111 = dq_i1*x49
    x112 = x25*x28
    x113 = sigma_kin_v_2_1*x112
    x114 = 4*x60
    x115 = x42*x60
    x116 = x114*x39*x40
    x117 = x31*x58
    x118 = x39*x76
    
    K_block_list = []
    K_block_list.append(x15*x19 + 4*x16*x67 + x19*x24 + x25*x36 - x25*(dq_i1*x71 + dq_i1*x72 - dq_i1*(x37*x43*x66 + x37*x47*x65 + 2*x68 + 2*x69 + x73) + x100*x15 + x100*x24 - x101*x50*x63 - x102*x28*x37*x77 + x36 + x67*x82) - 4*x37*(x68 + x69 + x73) + x42*x45 + x42*x48 - x50*x52*x55 + x61*x62*x63*(x56 - x59) + x78*(ddq_i1*(x12*x13**2 + x60*x65) + x17*x74 + x17*x75 - x18*(x74 + x75) - x53*x61*x76*x77) + x99*(-sigma_kin_v_2_1*x82*x88 + x31*x79*x81 + x31*x79*x92 + x50*x81 + x50*x92 - x91 - x95 + x97*(2*x38 + x39)) + 1.0*(sigma_pot_1_c*x2 + sigma_pot_1_s*x5)*(sigma_pot_2_c*x8 + sigma_pot_2_off + sigma_pot_2_s*x11))
    K_block_list.append(x103*x25*x30*x32 + x105*x29*x35*x98 - x106*x45 - x106*x48 + x107*x41*x54 + x108*x62 + x113*(dq_i1*x102*x39 - x101*x111 - x103*x109 + x110*x44 + x110*x47) + x17*x28*x53*x60*x64*x78 - x28*x39*x49*x55 + x99*(dq_i1*dq_i2*dq_j2*sigma_kin_v_2_2*x28*x31*x80 + dq_i1*dq_i2*dq_j2*sigma_kin_v_2_2*x31*x53*x85 + 2*dq_j2*sigma_kin_v_2_2*x17*x28*x46*x85 - x111*x81 - x111*x92 - x87*x90) + 1.0*(sigma_pot_1_c*x20 - sigma_pot_1_s*x21)*(sigma_pot_2_c*x84 - sigma_pot_2_s*x83))
    K_block_list.append(ddq_i1*x113*x60*x90 + ddq_j1*sigma_kin_v_2_2*x108 - ddq_j2*x104*x107*(dq_i2*x96 + x117 - x89) + sigma_kin_v_2_2*x112*(-x103*x52 + x118*x44 + x118*x47 - 2*x32*x34*x89 + x33*x34*x59 + x44*x93 + x47*x93) + x105*x114*x56*x85 - 8*x111*x28*x46*x90 + x115*x81 + x115*x92 - x116*x81 - x116*x92 + x32*x98*(x117*x90 + x33*x57*x81 + x39*x97 - x51*x88 - 2*x91 + x95) + 1.0*(sigma_pot_2_c*x11 + sigma_pot_2_s*x8)*(sigma_pot_1_c*x5 + sigma_pot_1_off + sigma_pot_1_s*x2))
    
    return K_block_list

