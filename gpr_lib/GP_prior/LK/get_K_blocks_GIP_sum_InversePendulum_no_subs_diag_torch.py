import torch

def get_K_blocks_GIP_sum_InversePendulum_no_subs(X1, X2, pos_indices, vel_indices, acc_indices, sigma_kin_vel_list, sigma_kin_pos_list, sigma_pot_list):

    q_i1 = X1[:,pos_indices[0]:pos_indices[0]+1]
    dq_i1 = X1[:,vel_indices[0]:vel_indices[0]+1]
    ddq_i1 = X1[:,acc_indices[0]:acc_indices[0]+1]
    q_j1 = X2[:,pos_indices[0]:pos_indices[0]+1]
    dq_j1 = X2[:,vel_indices[0]:vel_indices[0]+1]
    ddq_j1 = X2[:,acc_indices[0]:acc_indices[0]+1]
    q_i2 = X1[:,pos_indices[1]:pos_indices[1]+1]
    dq_i2 = X1[:,vel_indices[1]:vel_indices[1]+1]
    ddq_i2 = X1[:,acc_indices[1]:acc_indices[1]+1]
    q_j2 = X2[:,pos_indices[1]:pos_indices[1]+1]
    dq_j2 = X2[:,vel_indices[1]:vel_indices[1]+1]
    ddq_j2 = X2[:,acc_indices[1]:acc_indices[1]+1]

    sigma_kin_v_1_1 = sigma_kin_vel_list[0][0]
    sigma_kin_p_1_1_s = sigma_kin_pos_list[0][0]
    sigma_kin_p_1_1_c = sigma_kin_pos_list[0][1]
    sigma_kin_p_1_1_off = sigma_kin_pos_list[0][2]
    sigma_pot_1_s = sigma_pot_list[0][0]
    sigma_pot_1_c = sigma_pot_list[0][1]
    sigma_pot_1_off = sigma_pot_list[0][2]
    sigma_kin_v_2_1 = sigma_kin_vel_list[1][0]
    sigma_kin_p_2_1_s = sigma_kin_pos_list[1][0]
    sigma_kin_p_2_1_c = sigma_kin_pos_list[1][1]
    sigma_kin_p_2_1_off = sigma_kin_pos_list[1][2]
    sigma_kin_v_2_2 = sigma_kin_vel_list[1][1]
    sigma_kin_p_2_2_s = sigma_kin_pos_list[2][0]
    sigma_kin_p_2_2_c = sigma_kin_pos_list[2][1]
    sigma_kin_p_2_2_off = sigma_kin_pos_list[2][2]
    sigma_pot_2_s = sigma_pot_list[1][0]
    sigma_pot_2_c = sigma_pot_list[1][1]
    sigma_pot_2_off = sigma_pot_list[1][2]

    
    x0 = torch.sin(q_j1)
    x1 = torch.sin(q_i1)
    x2 = x0*x1
    x3 = torch.cos(q_i1)
    x4 = torch.cos(q_j1)
    x5 = x3*x4
    x6 = torch.cos(q_i2)
    x7 = torch.cos(q_j2)
    x8 = x6*x7
    x9 = torch.sin(q_i2)
    x10 = torch.sin(q_j2)
    x11 = x10*x9
    x12 = sigma_kin_v_1_1**2
    x13 = sigma_kin_p_1_1_c*x5 + sigma_kin_p_1_1_off + sigma_kin_p_1_1_s*x2
    x14 = x12*x13
    x15 = x14*(sigma_kin_p_1_1_c*x2 + sigma_kin_p_1_1_s*x5)
    x16 = dq_j1**2
    x17 = dq_i1**2
    x18 = 2*x17
    x19 = x16*x18
    x20 = x0*x3
    x21 = x1*x4
    x22 = sigma_kin_p_1_1_c*x20 - sigma_kin_p_1_1_s*x21
    x23 = sigma_kin_p_1_1_c*x21 - sigma_kin_p_1_1_s*x20
    x24 = x12*x22*x23
    x25 = 4*dq_j1
    x26 = sigma_kin_p_2_2_c*x7
    x27 = sigma_kin_p_2_2_s*x10
    x28 = sigma_kin_p_2_2_off + x26*x6 + x27*x9
    x29 = x28**2
    x30 = sigma_kin_v_2_1*x29
    x31 = sigma_kin_p_2_1_c*x20 - sigma_kin_p_2_1_s*x21
    x32 = sigma_kin_p_2_1_c*x5 + sigma_kin_p_2_1_off + sigma_kin_p_2_1_s*x2
    x33 = dq_j2*sigma_kin_v_2_2
    x34 = x32*x33
    x35 = x31*x34
    x36 = ddq_i2*x30*x35
    x37 = sigma_kin_p_2_1_c*x2 + sigma_kin_p_2_1_s*x5
    x38 = x32*x37
    x39 = dq_i1*dq_j1
    x40 = sigma_kin_v_2_1*x39
    x41 = dq_i2*x33
    x42 = x40 + x41
    x43 = 2*x42**2
    x44 = x29*x43
    x45 = sigma_kin_p_2_1_c*x21 - sigma_kin_p_2_1_s*x20
    x46 = x31*x45
    x47 = x28*x31
    x48 = x26*x9 - x27*x6
    x49 = dq_i2*x32
    x50 = x42*x49
    x51 = sigma_kin_v_2_1*x48*x50
    x52 = ddq_i2*x28
    x53 = dq_i2**2
    x54 = x48*x53
    x55 = 2*x54
    x56 = sigma_kin_v_2_2*x28
    x57 = x32**2
    x58 = 2*x57
    x59 = sigma_kin_v_2_1**2
    x60 = x29*x59
    x61 = x32*x60
    x62 = ddq_i1*(x14*x22 + x31*x61)
    x63 = x24*x39
    x64 = x15*x39
    x65 = x30*x42
    x66 = x46*x65
    x67 = x38*x65
    x68 = x66 + x67
    x69 = x14*x23
    x70 = x45*x61
    x71 = dq_i1*x28
    x72 = x48*x59
    x73 = x28*(sigma_kin_p_2_2_c*x11 + sigma_kin_p_2_2_s*x8)
    x74 = x40*x49
    x75 = 2*dq_j1
    x76 = ddq_i1*x32
    x77 = sigma_kin_v_2_1*x76
    x78 = sigma_kin_p_2_2_c*x10*x6 - sigma_kin_p_2_2_s*x7*x9
    x79 = x28*x78
    x80 = x32*x52
    x81 = x33*x78
    x82 = x80*x81
    x83 = x48*x78
    x84 = 2*x45
    x85 = x42*x71
    x86 = x78*x85
    x87 = x84*x86
    x88 = x71*x84
    x89 = x78*x88
    x90 = 4*x32
    x91 = dq_j1*x17
    x92 = 2*x47
    x93 = sigma_kin_v_2_2**2
    x94 = 4*x57
    x95 = x43*x57
    x96 = x41*x42*x94
    x97 = x32*x54
    x98 = dq_j1*x77
    x99 = x41*x71
    
    K_block_list = []
    K_block_list.append(4*ddq_j1*(ddq_i1*(x12*x13**2 + x57*x60) - dq_i2*x58*x71*x72 + x17*x69 + x17*x70 - x18*(x69 + x70)) + ddq_j2*sigma_kin_v_2_1*x56*x58*(x52 - x55) - 8*dq_j1*x47*x51 + dq_j2*sigma_kin_v_2_1*x90*(x50*x73 + x50*x83 + x73*x74 + x74*x83 - x75*x77*x79 - x82 - x87 + x89*(2*x40 + x41)) + x15*x19 + 4*x16*x62 + x19*x24 + x25*x36 - x25*(dq_i1*x66 + dq_i1*x67 - dq_i1*(x37*x39*x61 + x39*x46*x60 + 2*x63 + 2*x64 + x68) + x15*x91 + x24*x91 + x36 - x39*x49*x72*x92 - x51*x92 + x62*x75) + x38*x44 - 4*x39*(x63 + x64 + x68) + x44*x46 + 1.0*(sigma_pot_1_c*x2 + sigma_pot_1_s*x5)*(sigma_pot_2_c*x8 + sigma_pot_2_off + sigma_pot_2_s*x11))
    K_block_list.append(ddq_i1*sigma_kin_v_2_1*x25*x28*x57*x81 + 2*ddq_j1*sigma_kin_v_2_2*x30*x32*(-x18*x45 + x76) - ddq_j2*x28*x90*x93*(dq_i2*x88 - x80 + x97) + dq_j2**2*x52*x78*x93*x94 + x25*x56*(-2*x31*x33*x80 + x35*x55 + x38*x85 + x38*x99 + x46*x85 + x46*x99 - x47*x98) + x33*x90*(x34*x53*x73 + x41*x89 - x79*x98 + x81*x97 - 2*x82 + x87) - 8*x34*x45*x86 + x73*x95 - x73*x96 + x83*x95 - x83*x96 + 1.0*(sigma_pot_2_c*x11 + sigma_pot_2_s*x8)*(sigma_pot_1_c*x5 + sigma_pot_1_off + sigma_pot_1_s*x2))
    
    return K_block_list

